#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (<.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# http://nanoc.ws/docs/guides/paginating-articles/

preprocess do
  paginate_articles
end
compile '/blog/archive/*/' do
  filter :erb
  layout '/default/'
end

compile '/' do
  filter :erb
  layout '/default/'
end
route '/' do
  item.identifier + 'index.html'
end

compile '/assets/stylesheets/*' do
  filter :sass, Compass.sass_engine_options
end
route '/assets/stylesheets/*' do
  '/css/' + File.basename(item.identifier) + '.css'
end

compile '/assets/javascripts/*' do
  filter :uglify_js if ENV['NANOC_ENV'] == 'production'
end
route '/assets/javascripts/*' do
  '/js/' + File.basename(item.identifier) + '.js'
end

compile '/posts/*' do
  filter :fenced_code_block
  filter :kramdown
  layout 'article'
  layout 'default'
end
route '/posts/*' do
  post_url(item, has_extension: true)
end

# for static assets, e.g. /static/images/search.png to output/images/search.png
compile '/assets/*' do
end
route '/assets/*' do
  # /assets/foo.html/ => /foo.html
  item.identifier[7..-2]
end

compile '*' do
  if item[:extension] == 'md'
    filter :fenced_code_block
    filter :kramdown
    layout 'default'
  elsif item[:extension] == 'css'
    # don’t filter stylesheets
  elsif item.binary?
    # don’t filter binary items
  end
end
route '*' do
  if item[:extension] == 'css'
    # Write item with identifier /foo/ to /foo.css
    item.identifier.chop + '.css'
  elsif item[:extension] == 'txt'
    # for humans.txt, robots.txt
    item.identifier.chop + '.txt'
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '/pagination_page/', :erb
layout '*', :erb
