<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yysaki blog]]></title>
  <link href="http://www.yysaki.com/atom.xml" rel="self"/>
  <link href="http://www.yysaki.com/"/>
  <updated>2014-02-19T12:41:34+09:00</updated>
  <id>http://www.yysaki.com/</id>
  <author>
    <name><![CDATA[yysaki]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress as a Tracer Bullet]]></title>
    <link href="http://www.yysaki.com/blog/2014/02/12/octopress-as-a-tracer-bullet/"/>
    <updated>2014-02-12T02:27:45+09:00</updated>
    <id>http://www.yysaki.com/blog/2014/02/12/octopress-as-a-tracer-bullet</id>
    <content type="html"><![CDATA[<p>一旦ブログをoctopressで立ち上げたは言いものの、<a href="https://twitter.com/kana1">@kana</a>さんより</p>

<blockquote class="twitter-tweet" lang="ja"><p><a href="https://twitter.com/yysaki">@yysaki</a> ほしのかずほどありますね! <a href="http://t.co/cnDApQUMHV">http://t.co/cnDApQUMHV</a> Ruby製だとnanocがコンパクトにまとまってて冀(neocomplcache_start_auto_complete)部実装も面白いですね。</p>&mdash; Kana Natsuno (@kana1) <a href="https://twitter.com/kana1/statuses/432530023648485378">2014, 2月 9</a></blockquote>


<script async src="http://www.yysaki.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とコメントを頂戴したので、色々とRuby製の静的サイトジェネレータについて調べました。</p>

<!-- more -->


<h2>ツール選び</h2>

<p>自分のブログ作成における価値観は、以下のようになります。</p>

<ol>
<li>静的サイトジェネレータでGithub Pagesに運用の楽なブログを作る</li>
<li>Markdownで記事を書きたい</li>
<li>サクサクカスタマイズ出来てそれなりの見栄えなブログを作りたい

<ul>
<li>octopressのリキッドレイアウトとかかっこいいよね！</li>
</ul>
</li>
<li>手慣れたRuby製ツール</li>
<li>HP作りの勉強を兼ねるので魔術的要素が少なくコンパクトなフレームワークがいい</li>
</ol>


<p>その中、候補としては、</p>

<ul>
<li>nanoc</li>
<li>jekyll(octopress)</li>
<li>middleman</li>
</ul>


<p>あたりに絞られました。
静的サイトジェネレータの比較は色々な記事が挙がっているので本記事では取り上げず、参考にしたリンクを下記に示すだけに留めます。
この中でnanocがヘルパーメソッドを手作りしたり自分でブログの機能を作成する感が楽しそうです。
octopressもとてもいいのですが、新しくカスタマイズする分には型にはまりすぎる印象があります。
そのため将来的にはnanocを使ってみたいですね。</p>

<h2>引っ越し</h2>

<p>しかしながらまずは引っ越し元のWordpressを荷下ろしを終わらせたいので、octopressでしばらく運用してみようと思います。
自分なりのブログに対する要求分析がしっかりされてないので、どんな機能をnanocで作っていきたいかをoctopressで洗い出すのも重要ですし。</p>

<p>また、多少ながらカスタマイズとして、ブログコメントサービスのDisqusの導入やはてブボタンの設置など以下のリンクを参考にやってみました。
* <a href="http://morizyun.github.io/blog/octopress-hatena-disqus-new-tab/">5分でできる簡単 Octopress セッティング &ndash; 酒と泪とRubyとRailsと</a></p>

<h2>結論</h2>

<p>曳光弾としてoctopressに引っ越して要件を洗い出しつつ、将来的にはnanocでブログの自作をする方針で行こうと思います。</p>

<h3>参考リンク</h3>

<ul>
<li><a href="http://staticsitegenerators.net/">Static Site Generators</a></li>
<li><a href="http://higelog.brassworks.jp/?p=2076">Nanoc以外の静的サイト生成ツールを調べてみた | ひげろぐ</a></li>
<li><a href="http://rubyredbricks.com/blog/2013/09/30/from-octopress-to-nanoc/">Ruby Red Bricks &ndash; From Octopress to nanoc</a></li>
<li><a href="http://n.blueblack.net/articles/2012-05-03_02_nanoc_getting_started/">nanoc導入メモ 1/5 「Getting Started」編 &ndash; ナレッジエース</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wordpressからoctopressへの引っ越し]]></title>
    <link href="http://www.yysaki.com/blog/2014/02/09/octopress-from-wordpress/"/>
    <updated>2014-02-09T21:48:15+09:00</updated>
    <id>http://www.yysaki.com/blog/2014/02/09/octopress-from-wordpress</id>
    <content type="html"><![CDATA[<p>表題の通り, 作業の快適さを求めて今回wordpressからoctopressへ引っ越しました。</p>

<p>レイアウトやコメント欄などの調整は追々やっていきます。</p>

<p>今回参考にさせて頂いた記事一覧です。</p>

<ol>
<li><a href="http://morizyun.github.io/blog/octopress-gitpage-minimum-install-guide/">OctopressでGitHub無料ブログ構築。sourceをBitbucket管理。簡単ガイド！ &ndash; 酒と泪とRubyとRailsと</a></li>
<li><a href="http://nomnel.net/blog/wordpress-to-octopress/">WordpressからOctopressに移行する &ndash; 飲んだり寝たり</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ビルドしたpdfをsshfsからSkimで読む]]></title>
    <link href="http://www.yysaki.com/blog/2013/12/29/reading-built-pdf-by-skim/"/>
    <updated>2013-12-29T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2013/12/29/reading-built-pdf-by-skim</id>
    <content type="html"><![CDATA[<p>この度修論の開発環境を整えたのでブログ記事にしました。</p>

<h2>背景</h2>

<p>研究室マシンでtexを編集しているのですが、作業結果のPDFを手元で快適に確認したいのです。 そこで、開発方針を以下のように整えました。</p>

<ul>
<li>研究室マシンでtexの編集、ビルドを行う。</li>
<li>sshfsをマウントすることで研究室マシンにアクセスする。</li>
<li>Skimでsshfs上のpdfを閲覧し、自動更新モードで変更を反映する。</li>
</ul>


<p>環境は以下のとおりです。</p>

<ul>
<li>ローカル: Mac OS X Mavericks、なるべくhomebrewを使う</li>
<li>リモート: Linux、sshで接続</li>
</ul>


<h2>OSXFUSEのインストール</h2>

<p>まず下記URLからOSXFUSEをダウンロード、インストールします。</p>

<ul>
<li><a href="http://sourceforge.net/projects/osxfuse/files/?source=navbar">FUSE for OS X &#8211; Browse Files at SourceForge.net</a></li>
</ul>


<p>先にhomebrewでfuse–4x-kextを試したのですが、正しくsshfsを動作させられなかったのでこちらを採用です。</p>

<h2>sshfsのインストール</h2>

<p>以下のコマンドでインストールします。</p>

<pre><code>    $ sudo brew link fuse4x
    $ sudo brew install sshfs
    $ sudo /bin/cp -rfX /usr/local/Cellar/fuse4x-kext/0.9.2/Library/Extensions/fuse4x.kext /Library/Extensions
    $ sudo chmod +s /Library/Extensions/fuse4x.kext/Support/load_fuse4x
</code></pre>

<p>以下のコマンドでマウントします。</p>

<pre><code>    $ mkdir mnt
    $ sshfs -p 22 [User]@[Host]:[Dir] mnt
</code></pre>

<p>マウントが出来たかどうかはdfで確認出来ます。 またマウントを解除するには以下のコマンドです。</p>

<pre><code>    $ unmount mnt
</code></pre>

<h2>Skimのインストール</h2>

<p>以下のURLからダウンロード出来ます。</p>

<ul>
<li><a href="http://skim-app.sourceforge.net">Skim | Home</a></li>
</ul>


<p>自動更新を行うため「環境設定&#8230; > 同期する > ファイルの変更をチェック」をちぇっくします。</p>

<h2>その他</h2>

<ul>
<li><p>バージョン管理はgithubのプライベートリポジトリで行っています。修論目的であれば学生用アカウントを申請することで、無料でMicroプランに加入できました。</p>

<ul>
<li><a href="https://github.com/edu">Contact GitHub</a></li>
</ul>
</li>
<li><p>エディタはvimを使用しています。以下のように.vimrcを設定すれば&#8221;<Space>q&#8221;でtexのmake出来ます。</p>

<pre><code>NeoBundle 'thinca/vim-quickrun'
silent! map &lt;Space&gt;q &lt;Plug&gt;(quickrun)
let g:quickrun_config['tex'] = {"command": "make", "exec" : "%c %o",  "outputter": "error:buffer:quickfix"}
</code></pre></li>
<li><p>学生共用のマシンで作業してるので、負荷を考え自動ビルドはやめときました。自分でmakeコマンドを叩きたくない人はOcamlのOmakeやRubyのGuardを使うと良さげです。</p></li>
</ul>


<h2>まとめ</h2>

<p>以上で修論の開発環境を整えました。 開発マシンでtexの編集を行い、ビルドするとSkimの自動更新が反応して新しいPDFを表示してくれます。 Vimで<Space>qすることでPDFのレビューまで自動化出来たので概ね満足な結果です. (但しSkimが反映されるまでに10秒程かかります。sshfsの限界&#8230;)</p>

<h2>参考記事</h2>

<ul>
<li><a href="http://www.danielandrade.net/2013/10/28/mounting-a-filesystem-via-ssh-on-osx-mavericks/">Mounting a Filesystem via SSH on OSX Mavericks &#8211; DanielAndrade.net</a></li>
<li><a href="http://mount-q.com/yamaqblog/?p=15899">Macでsshfsを使う | yamaq blog</a></li>
<li><a href="http://macwiki.sourceforge.jp/wiki/index.php/Skim">MacWiki &#8211; Skim</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blockdiagのエラーを解決できず&#8230;]]></title>
    <link href="http://www.yysaki.com/blog/2013/12/14/blockdiag/"/>
    <updated>2013-12-14T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2013/12/14/blockdiag</id>
    <content type="html"><![CDATA[<p><a href="http://blockdiag.com/ja/blockdiag/">blockdiag</a>を使ってみたくてインストールしてみたのですが、画像生成でエラーが発生し、これをうまく解決できませんでした。今回開発者の<a href="https://twitter.com/tk0miya">@tk0miya</a>さんに解決方法について質問をするために、エラー報告を記事にまとめたいと思います。</p>

<h2>環境</h2>

<p>私の環境は以下の通りです。</p>

<ul>
<li>OS: mac OS X 10.9(Mavericks)</li>
<li>Python: 2.7.5</li>
<li>homebrew, easy_installを使ってインストール</li>
</ul>


<h2>インストール手順</h2>

<p>実際にblockdiagをインストールするために行った手順を記述します。</p>

<p>まずPILをインストールします。PILはfreetypes, zlib, libjpeg, libpngといったライブラリに依存するようなので、まずこれらのインストールから始めます。 freetypeに関しては<a href="http://blockdiag.com/ja/blockdiag/introduction.html#macosx-homebrew">ここ</a>を参考に /usr/local/Library/Formula/freetype2.rb を作成します。その後、以下の手順を行います。</p>

<pre><code>$ sudo brew install freeytype2 ibjepg libpng
$ brew tap homebrew/dupes
$ sudo brew install zlib
</code></pre>

<p>この時インストールしたzlibライブラリはPathに通らないため、手動でリンクを貼る必要があります。そのため /usr/local/ に /usr/local/Cellar/zlib/1.2.8/ 以下のlib, include内のファイルをシンボリックリンクを貼りました。</p>

<p>続いてPIL自体のインストール。</p>

<pre><code>$ sudo easy_install pil
</code></pre>

<p>SUMMARYは以下のようになり、zlibやfreetypeに対応されているように見えます。</p>

<pre><code>--------------------------------------------------------------------
PIL 1.1.7 SETUP SUMMARY
--------------------------------------------------------------------
version       1.1.7
platform      darwin 2.7.5 (default, Aug 25 2013, 00:04:04)
              [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)]
--------------------------------------------------------------------
--- TKINTER support available
--- JPEG support available
--- ZLIB (PNG/ZIP) support available
--- FREETYPE2 support available
*** LITTLECMS support not available
--------------------------------------------------------------------
</code></pre>

<p>最後にblockdiagのインストール。</p>

<pre><code>$ sudo easy_install -mxN blockdiag
</code></pre>

<p>して、</p>

<pre><code>$ blockdiag --version
blockdiag 1.3.2
</code></pre>

<p>のように、blockdiagをインストール出来ました。</p>

<h2>症状</h2>

<p>以下のようなsimple.diagを生成しようとして見ると、エラーが発生します。</p>

<pre><code>    diagram admin {
      top_page -&gt; config -&gt; config_edit -&gt; config_confirm -&gt; top_page;
    }
</code></pre>

<p>デバッグプリントは以下の通りです。</p>

<pre><code>$ blockdiag simple.diag --debug
Traceback (most recent call last):
  File "/Library/Python/2.7/site-packages/blockdiag-1.3.2-py2.7.egg/blockdiag/utils/bootstrap.py", line 36, in run
    return self.build_diagram(parsed)
  File "/Library/Python/2.7/site-packages/blockdiag-1.3.2-py2.7.egg/blockdiag/command.py", line 42, in build_diagram
    return super(BlockdiagApp, self).build_diagram(tree)
  File "/Library/Python/2.7/site-packages/blockdiag-1.3.2-py2.7.egg/blockdiag/utils/bootstrap.py", line 83, in build_diagram
    drawer.save()
  File "/Library/Python/2.7/site-packages/blockdiag-1.3.2-py2.7.egg/blockdiag/drawer.py", line 186, in save
    return self.drawer.save(self.filename, size, self.format)
  File "/Library/Python/2.7/site-packages/blockdiag-1.3.2-py2.7.egg/blockdiag/imagedraw/filters/linejump.py", line 172, in save
    return self.target.save(*args, **kwargs)
  File "/Library/Python/2.7/site-packages/blockdiag-1.3.2-py2.7.egg/blockdiag/imagedraw/png.py", line 400, in save
    self._image.save(self.filename, _format)
  File "build/bdist.macosx-10.9-intel/egg/PIL/Image.py", line 1453, in save
    save_handler(self, fp, filename)
  File "build/bdist.macosx-10.9-intel/egg/PIL/PngImagePlugin.py", line 619, in _save
    ImageFile._save(im, _idat(fp, chunk), [("zip", (0,0)+im.size, 0, rawmode)])
  File "build/bdist.macosx-10.9-intel/egg/PIL/ImageFile.py", line 454, in _save
    e = Image._getencoder(im.mode, e, a, im.encoderconfig)
  File "build/bdist.macosx-10.9-intel/egg/PIL/Image.py", line 405, in _getencoder
    raise IOError("encoder %s not available" % encoder_name)
IOError: encoder zip not available
</code></pre>

<h2>参考URL</h2>

<ul>
<li><a href="http://blockdiag.com/ja/blockdiag/introduction.html">blockdiag の概要 — blockdiag 1.0 documentation</a></li>
<li><a href="http://librabuch.jp/2013/05/python_pillow_pil/">Python3.3対応画像処理ライブラリ Pillow(PIL) の使い方 | Librabuch</a></li>
<li><a href="http://qiita.com/Jxck_/items/d329aa5c9b50519dcfaf">mac で spdylay の build もしくは homebrew と pkg-config &#8211; Qiita [キータ]</a>

<ul>
<li>zlib周りを参考にさせて頂きました</li>
</ul>
</li>
</ul>


<p>以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『シェル操作課題 』をシェルで解きなおす]]></title>
    <link href="http://www.yysaki.com/blog/2013/04/04/shell-operation-test-on-bash/"/>
    <updated>2013-04-04T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2013/04/04/shell-operation-test-on-bash</id>
    <content type="html"><![CDATA[<p>以前解いた<a href="http://yysaki.com/blog/archives/79">『シェル操作課題 』をRubyのワンライナーで解いてみた</a> の問題をunixコマンドのみで解き直した。</p>

<script src="https://gist.github.com/yysaki/5310298.js">{}</script>


<ul>
<li><code>uniq -c</code>で重複した数をカウント出来る</li>
<li><code>sort</code>の<code>-k</code>オプションを同時に指定することで第一指定順、第二指定順でソート出来る</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOSX Cisco VPNClient対策]]></title>
    <link href="http://www.yysaki.com/blog/2013/02/13/cisco-vpn-client-on-mac-os-x/"/>
    <updated>2013-02-13T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2013/02/13/cisco-vpn-client-on-mac-os-x</id>
    <content type="html"><![CDATA[<h3>状況</h3>

<ul>
<li>macbook air学内VPN接続のためvpnクライアントをインストールしたが64bitカーネルでは動かず

<ul>
<li>ciscoは32bitのみサポートしている</li>
<li>ネットのmacユーザにはciscoを避ける向きがあるようだ</li>
</ul>
</li>
</ul>


<h3>対策</h3>

<ul>
<li>OSを常に32bitカーネルとして起動する

<ul>
<li>搭載メモリは今のところ4GB以内のため被害は少ないと判断</li>
<li>&#8220;sudo systemsetup -setkernelbootarchitecture i386&#8243;を実行する</li>
</ul>
</li>
</ul>


<h3>参考URL</h3>

<ul>
<li><a href="http://forums.macrumors.com/archive/index.php/t-1110046.html">同症状とその対策</a></li>
<li><a href="https://discussions.apple.com/thread/3077376?start=0&amp;tstart=0">Cisco VPN Client lacks 64 bit Support</a></li>
<li><a href="http://support.apple.com/kb/HT3773?viewlocale=ja_JP">32bit化手順</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress セキュリティ強化後の&#8221;ディレクトリを作成できませんでした。&#8221;を解決する]]></title>
    <link href="http://www.yysaki.com/blog/2013/01/31/wordpress-permission-denied/"/>
    <updated>2013-01-31T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2013/01/31/wordpress-permission-denied</id>
    <content type="html"><![CDATA[<p>&#8220;wordpress Markdown on Save Improved&#8221;プラグインをインストールする際に躓いた点を記事にしました。<br/>
(このプラグインを使用して、この記事をmarkdown形式で書いたのですが使い勝手は上々です。)</p>

<p>以前このブログについて <a href="http://csspro.digitalskill.jp/%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB/%E3%83%AF%E3%83%BC%E3%83%89%E3%83%97%E3%83%AC%E3%82%B9/wordpress%E3%81%AE%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E5%BC%B7%E5%8C%96/">WordPressのセキュリティを徹底強化 &#8211; CSSPRO</a> という記事を参考にセキュリティ強化を行ったのですが、プラグインの新規追加をダッシュボード上で行おうとした際に</p>

<pre><code>  ディレクトリを作成できませんでした。 /xxx/xxx/xxxx/wp-content/upgrade/markdown-on-save-improved.tmp/markdown-on-save-improved
</code></pre>

<p>というエラーが出てしまう問題に遭遇しました。</p>

<p>試しにwp-content以下全てのディレクトリのパーミッションを777に変更しても状況は変わりませんでした。<br/>
似たような症状がないかwebを検索すると <a href="http://webcache.googleusercontent.com/search?q=cache:KWw6ipeQ-4kJ:openpne3.biz/category/%E6%9C%AA%E5%88%86%E9%A1%9E/+&amp;cd=1&amp;hl=ja&amp;ct=clnk">この記事</a>を発見し、そこでは&#8221;AskApache Password Protect&#8221;プラグインが原因になっていました。<br/>
そこでセキュリティ強化の際インストールした&#8221;AskApache Password Protect&#8221;プラグインを一時停止してみると、プラグインの新規追加が無事行えました。</p>

<p>セキュリティ強化の記事では、wp-adminの保護のため&#8221;AskApache Password Protect&#8221;導入を進めていたのですが、このプラグインはwp-adminだけでなくwp-content以下にも影響があるものだったようです。<br/>
今後プラグインの新規追加など行う際にはこのプラグインを停止することを忘れずにいたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GithubのプロジェクトをCruiseControlで自動ビルドしてみた]]></title>
    <link href="http://www.yysaki.com/blog/2012/09/20/github-by-cruisecontrol/"/>
    <updated>2012-09-20T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2012/09/20/github-by-cruisecontrol</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/%E9%81%94%E4%BA%BA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC%E2%80%95%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E3%81%AB%E4%B8%8D%E5%8F%AF%E6%AC%A0%E3%81%AA%E5%9F%BA%E7%A4%8E%E7%9F%A5%E8%AD%98-%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86-%E3%83%A6%E3%83%8B%E3%83%83%E3%83%88%E3%83%86%E3%82%B9%E3%83%88-software-engineering/dp/475614599X">達人プログラマー―ソフトウェア開発に不可欠な基礎知識 バージョン管理/ユニットテスト/自動化</a> に触発されて、Javaプロジェクトの自動テストにチャレンジしました。</p>

<p><img src="http://www.yysaki.com/images/CC_dashboard.png" alt="ダッシュボード" /></p>

<p>継続的インテグレーションツールである<a href="http://cruisecontrol.sourceforge.net/">Cruisecontrol</a>(以下CC)を使って、 GitHub上のプロジェクトを自動ビルドしてみます。</p>

<p>今回の環境は、マシンをUbuntu 10.04.4 LTS, CCを<a href="http://sourceforge.net/projects/cruisecontrol/files/CruiseControl/2.8.4/">cruisecontrol-bin-2.8.4.zip</a>、ビルドターゲットを僕の作った<a href="https://github.com/yysaki/MyJavaTetris">MyJavaTetris</a>とします。</p>

<p>目標はソフトウェア開発に役立てるというよりもCCを回すことであるので、手段と目的が逆になっている気もしますがこれも勉強の一つです。</p>

<p>ちなみに上の画像は、CCのdashboardで実際に表示されるページのスクリーンショットです。</p>

<div>
</div>




<div>
  以下手順です。
</div>


<p>本書の手順にあるスクリプトの情報は古く動作しなかったため、<a href="http://cruisecontrol.sourceforge.net/gettingstartedsourcedist.html">公式HPのGettingStarted</a>を参考にしました。</p>

<div>
  <h1>
    CCのインストール
  </h1>
</div>




<div>
</div>




<div>
</div>




<div>
  CCをインストールして/opt/cruisecontrol/ に配置します。
</div>




<div>
</div>


<blockquote><p>wget <a href="http://jaist.dl.sourceforge.net/project/cruisecontrol/CruiseControl/2.8.4/cruisecontrol-bin-2.8.4.zip">http://jaist.dl.sourceforge.net/project/cruisecontrol/CruiseControl/2.8.4/cruisecontrol-bin-2.8.4.zip</a></p>

<p>unzip cruisecontrol-bin-2.8.4.zip</p>

<p>mv cruisecontrol-bin-2.8.4 /opt/cruisecontrol/</p></blockquote>

<div>
</div>




<div>
  ついでに.bashrcにPATHを通しておきます。
</div>




<div>
</div>


<blockquote><p><div>
  echo &#8220;export PATH=$PATH:/opt/cruisecontrol&#8221; >> ~/.bashrc
</div></p>

<p><div>
  source ~/.bashrc
</div></p></blockquote>

<div>
</div>




<div>
  この手順の後、カレントディレクトリを/opt/cruisecontrol/に指定してcruisecontrol.shを実行することでCCの動作確認ができます。
</div>




<div>
</div>




<div>
</div>


<h1>Githubプロジェクトの設定</h1>

<div>
</div>




<div>
</div>




<div>
  続いて自分のGitHubプロジェクトをCCのビルドループに追加する手順です。
</div>




<div>
  今回、作業ディレクトリを /work/cc/に置くこととして、必要なディレクトリを作成していきます。
</div>




<div>
</div>


<blockquote><p><div>
  cd /work/cc
</div></p>

<p><div>
  mkdir projects artifacts logs
</div></p></blockquote>

<div>
</div>




<div>
  次に、/work/cc/下に必要なスクリプトを二つ作成します。
</div>




<div>
  一つ目はconfig.xmlです。このファイルによってCCのビルドループが設定されます。
</div>




<div>
    <pre class="brush: xml; title: ; notranslate" title="">
&lt;cruisecontrol&gt;
  &lt;project name="MyJavaTetris" buildafterfailed="true"&gt;
    &lt;listeners&gt;
      &lt;currentbuildstatuslistener
        file="logs/MyJavaTetris/status.txt"/&gt;
    &lt;/listeners&gt;

    &lt;!-- Bootstrappers are run every time the build runs,
                                                 *before* the modification checks --&gt;
    &lt;bootstrappers&gt;
    &lt;/bootstrappers&gt;

    &lt;!-- Defines where CruiseControl looks for changes, to decide
                            whether to run the build --&gt;
    &lt;modificationset quietperiod="10"&gt;
      &lt;cvs localworkingcopy="projects/MyJavaTetris"/&gt;
    &lt;/modificationset&gt;

    &lt;!-- Configures the actual build loop, how often and which
                                  build file/target --&gt;
    &lt;schedule interval="60"&gt;
      &lt;ant buildfile="build-MyJavaTetris.xml"
        uselogger="true"/&gt;
    &lt;/schedule&gt;

    &lt;!-- directory to write build logs to --&gt;
    &lt;log/&gt;

    &lt;!-- Publishers are run *after* a build completes --&gt;
    &lt;publishers&gt;
    &lt;/publishers&gt;
  &lt;/project&gt;
&lt;/cruisecontrol&gt;
</pre>
</div>




<div>
</div>




<div>
  二つ目はbuild-MyJavaTetris.xmlです。このファイルにはprojects/ディレクトリにgit cloneし、ant buildで動作確認するプロセスが記述されています。antの標準機能ではgitの操作に対応していなかったので、<a href="http://tlrobinson.net/blog/2008/11/ant-tasks-for-git/">この記事</a>を参考にgitコマンドをmacrodefしています。</p> <pre class="brush: xml; title: ; notranslate" title="">
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;project name="build-MyJavaTetris" default="build" basedir="projects"&gt;
  &lt;target name="build"&gt;
    &lt;macrodef name = "git"&gt;
      &lt;attribute name = "command" /&gt;
      &lt;attribute name = "dir" default = "" /&gt;
      &lt;element name = "args" optional = "true" /&gt;
      &lt;sequential&gt;
        &lt;echo message = "git @{command}" /&gt;
        &lt;exec executable = "git" dir = "@{dir}"&gt;
          &lt;arg value = "@{command}" /&gt;
          &lt;args/&gt;
        &lt;/exec&gt;
      &lt;/sequential&gt;
    &lt;/macrodef&gt;

    &lt;delete dir="MyJavaTetris" /&gt;
    &lt;git command ="clone"&gt;
      &lt;args&gt;
        &lt;arg value ="ssh://git@github.com:22/yysaki/MyJavaTetris.git"/&gt;
      &lt;/args&gt;
    &lt;/git&gt;
    &lt;ant antfile="build.xml" dir="MyJavaTetris" target="build" /&gt;
    &lt;!-- nazo no error &lt;ant antfile="build.xml" dir="MyJavaTetris" target="test" /&gt; --&gt;
  &lt;/target&gt;
&lt;/project&gt;
</pre>
  
  <p>
    これで設定は全て完了です。
  </p>
  
  <p>
    /work/cc/下でcruisecontrol.shを実行するとMyJavaTetrisの自動ビルドが行われます。
  </p>
  
  <p>
    後はずっと放置しておけばCCさんが必要なタイミングでプロジェクトの自動ビルドを行います。
  </p>
  
  <p>
    リポジトリにコミットした時などにhttp://localhost:8080/にアクセスして動作をニヤニヤ監視しましょう。
  </p>
  
  <p>
    以上です。
  </p>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『シェル操作課題 』をRubyのワンライナーで解いてみた]]></title>
    <link href="http://www.yysaki.com/blog/2012/09/06/shell-operation-test-on-ruby-oneliner/"/>
    <updated>2012-09-06T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2012/09/06/shell-operation-test-on-ruby-oneliner</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/Yamashiro0217/20120727/1343371036">シェル操作課題 (cut, sort, uniq などで集計を行う) 設問編</a> の記事にある設問を遅ればせながら解いてみました。</p>

<p>Rubyの勉強中だったので、全問をRubyのワンライナーのみでやります。<br/>
Rubyのversionは1.9.3, 入力ファイル名を&#8221;data&#8221;とします。</p>

<h3>問1</h3>

<blockquote><p>ruby -pe &#8221; data</p></blockquote>

<p>-eオプションでスクリプトモード, -pオプションで&#8221;while gets{/* code */ puts $_}&#8221;としてコード片を実行する。</p>

<p>この場合 コード片は空なのでファイルを一列ずつputsするのみです。</p>

<h3>問2</h3>

<blockquote><p>ruby -F, -ane &#8216;puts &#8220;#{$F[0]},#{$F[3]}&#8221;&#8216; data</p></blockquote>

<p>-n オプションは-p のputs $_を削ったもの。</p>

<p>-aは&#8221;auto aplit&#8221;の頭文字、$_.splitの結果が配列として$F変数に代入される。</p>

<p>-F オプションで区切り文字を指定する。これは文字列でも正規表現でもOK</p>

<h3>問3</h3>

<blockquote><p>ruby -F, -ane &#8216;puts $_ if $F[0]==&#8221;server4&#8243;&#8216; data</p></blockquote>

<h3>問4</h3>

<blockquote><p>ruby -ne &#8216;i||=0; i+=1; END{ puts i }&#8217; data</p></blockquote>

<p>注目は&#8221;||=&#8221;演算子とENDキーワードの二つ。</p>

<p>&#8220;||=&#8221;はループ文の中で値を初期化する際便利な、今回調べて一番便利だと感じたイディオムでした。</p>

<p>上の式の場合&#8221;i = i || 0&#8243;と解釈され、iにはiが未代入の時のみ0を代入され、それ以外の時は自身を代入する。</p>

<p>また、ENDブロック内のコードはwhileループの終了後に実行されるため、-nオプションを使ってる場合でもwhile外部での制御が行える。</p>

<h3>問5</h3>

<blockquote><p>ruby -F, -ane &#8216;a ||= []; a &lt;&lt; $F; END{a.sort{|x, y| x[0]!=y[0] ? x[0] &lt;=> y[0] : x[2].to_i &lt;=> y[2].to_i}.[](0,5).each{|b| puts &#8220;#{b[0]},#{b<a href="http://d.hatena.ne.jp/Yamashiro0217/20120727/1343371036">1</a>},#{b[2]},#{b[3]}&#8221;} }&#8217; data</p></blockquote>

<p>sortの判定方法をイテレータ用のブロックで指定する記法はRubyならではでおもしろかったです。</p>

<p>この辺からセミコロンが増えて、ワンライナーというには少し苦しいかも。</p>

<h3>問6</h3>

<blockquote><p>ruby -ne &#8216;a ||= []; a &lt;&lt; $<em> unless a.index($</em>); END{ puts a.size }&#8217; data</p></blockquote>

<h3>問7</h3>

<blockquote><p>ruby -F, -ane &#8216;a ||= []; a &lt;&lt; $F[2] unless a.index($F[2]); END{ puts a.size }&#8217; data</p></blockquote>

<h3>問8</h3>

<blockquote><p>ruby -F, -ane &#8216;h ||= {}; h.default = 0; h[$F[3]] += 1; END{ a = h.to_a.sort{|x, y| y<a href="http://d.hatena.ne.jp/Yamashiro0217/20120727/1343371036">1</a> &lt;=> x<a href="http://d.hatena.ne.jp/Yamashiro0217/20120727/1343371036">1</a>}.[](0); puts &#8220;#{a<a href="http://d.hatena.ne.jp/Yamashiro0217/20120727/1343371036">1</a>} #{a[0]}&#8221; }&#8217; data</p></blockquote>

<p>Hashオブジェクトはdefault属性を設定することで初期値を設定できる。</p>

<h3>問9</h3>

<blockquote><p>ruby -F, -ane &#8216;h ||= {}; h.default = 0; h[$F[0].gsub(/server/, &#8220;xxx&#8221;)] += 1; END{ h.to_a.sort{|x, y| x[0] &lt;=> y[0]}.each{|l, r| puts &#8220;#{r} #{l}&#8221;} }&#8217; data</p></blockquote>

<h3>問10</h3>

<blockquote><p>ruby -F, -ane &#8216;a ||= []; n = $F[2].to_i; a &lt;&lt; n if (n>=10) &amp;&amp; (not a.index(n)); END{ a.sort!; puts a }&#8217; data</p></blockquote>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>以上。</p>

<p>sed, awkなどunix伝統の文字列処理に慣れてないので、スクリプト言語一つ勉強しておくだけでこういった処理が書けるのはいいですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS Xにeclipse + Pleiadesをインストールする時少し引っ掛かった]]></title>
    <link href="http://www.yysaki.com/blog/2012/07/21/eclipse-and-pleiades-on-mac-os-x/"/>
    <updated>2012-07-21T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2012/07/21/eclipse-and-pleiades-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>macbookair を借りて作業ができるようになったので、プログラミング開発環境を整えています。<br/>
Mac OS Xがlinuxベースであることからunixライクなターミナルを立ち上げることが出来ることや、パッケージ管理のHomeBrewがあることがWindowsと比べ魅力的だと感じています。</p>

<p>今回はjavaの開発用にeclipse4.2 + pleiades1.3.4をインストールしました。<br/>
下にあるリンクの記事を参考にしてインストール手順を進めたのですが、pleiades関係で一点だけ詰まった箇所があったのでそれをメモしておきます。</p>

<p>その詰まった箇所とは、eclipse起動時にpleiadesを呼び出すためeclipse.iniに記述する一行です。それが、</p>

<p>-javaagent:plugins/jp.sourceforge.mergedoc.pleiades/pleiades.jar</p>

<p>では良くなく、パスを絶対パスで</p>

<p>-javaagent:/Applications/eclipse/plugins/jp.sourceforge.mergedoc.pleiades/pleiades.jar</p>

<p>のように記述することが必要でした。<br/>
(Readme.txtをよくよく読めば解決する話でしたがどうも見落としてしまったようです^^;)</p>

<p>他の手順はリンク先を参考にし、上記問題を解決したところでeclipseは無事動作したので、無事Eclipse上でjavaのHello Worldプログラムを実行することができました。<br/>
後は/Application/に放り込み、eclipse.AppをDockに並べた所でeclipseのインストールは完了しました。</p>

<p>以上です、MacのインストールはWindowsと違ってレジストリを気にしたり実行ファイル置き場に悩まなくて済むからスマートでいいですね！</p>

<p>参考:<br/>
<a href="http://d.hatena.ne.jp/architshin/20110224/1298519661">MacでPleiades All in One Eclipse &#8211; Archit!!<br/>
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPressでBootstrapテーマを触ってみる]]></title>
    <link href="http://www.yysaki.com/blog/2012/03/28/wordpress-3-3-1-bootstrap/"/>
    <updated>2012-03-28T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2012/03/28/wordpress-3-3-1-bootstrap</id>
    <content type="html"><![CDATA[<p>今流行りのCSSフレームワークである、Twitter Booststrapについて、一度使ってみたいなーと記事を読みあさっていました。<br/>
そこでTwitter Bootstrapで作られたWordPressテーマであるWPBSを使ってcssの勉強したいと思い、このwebサイトのテーマに設定しました。<br/>
WPBSの設定の仕方などは以下の記事を参考にさせて頂きました。</p>

<p>はじめよう/Twitter Bootstrapで出来たWordPressテーマ「WPBS」を使ってみる</p>

<p><a href="http://getstarted.main.jp/blog/wordpress/twitterbootstrap-wordpress-theme-wpbs/">http://getstarted.main.jp/blog/wordpress/twitterbootstrap-wordpress-theme-wpbs/</a></p>

<p>インストール、導入はとても簡単でしたが、一点不具合があり、少し解決に苦労しました。<br/>
このテーマのウィジェットであるMain Sidebarは、ブログ記事枠の右に配置されています。<br/>
しかしレイアウトが見本と比べ崩れ、位置が記事の下に配置されてしまいました。<br/>
これは、前記事で引用ブロックの使用に誤りがあり、ブログ記事の枠から文字がはみ出て、ブログ枠隣にMain Sidebarの置ける余地がなくフローレイアウトでブログ枠下に流れたためでした。<br/>
引用ブロックを正しい?文法に書きなおした時にこの症状が収まりました。</p>

<p>この不具合の内容をまとめると、ブログ記事の記述方法が悪いとWPBSテーマ全体のレイアウトが崩れる可能性があるから注意しましょう、という感じでしょうか。</p>

<p>また、WPBSは外観の変更が簡単(Bootstrapの性質)なので、テーマに少し調節をしてみて楽しもうかと思います。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress 3.3.1 自動update時のout　of　memoryエラー]]></title>
    <link href="http://www.yysaki.com/blog/2012/02/13/wordpress-3-3-1-error/"/>
    <updated>2012-02-13T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2012/02/13/wordpress-3-3-1-error</id>
    <content type="html"><![CDATA[<p>wordpressの更新ボタンを押し3.3.1へのインストールを行わせると</p>

<blockquote><p>Fatal error: Out of memory (allocated 22282240) (tried to allocate 3932160 bytes) in /usr/home/nextweb/starm/html/yysaki/wp/wp-includes/class-http.php on line 1066</p></blockquote>

<p>の警告が出てupdateに失敗した。バックアップデータはこの後update作業前に残せたので一安心。<br/>
そして”Out of memory”の原因を探る。<br/>
参考にしたWordPressのフォーラム記事(<a href="http://wordpress.org/support/topic/fatal-error-out-of-memory-4">http://wordpress.org/support/topic/fatal-error-out-of-memory-4</a>)によると、対策法は</p>

<blockquote><p>text editor and change the values for memory_limit. By default it should see memory_limit = 8M. Try changing it to 12M. if it wil not resolve the problem then try to increase it either 16M or 24M.</p>

<p>2) If you can’t find the php.ini file, open up the PHP file which requires more memory and add this line just after ini_set(’memory_limit’, ‘12M’); we can increase memory upto 16M or 24M to resolve the issue. But do it try with 12M first.</p>

<p>3) In last, open the .htaccess file from the root/public_html folder and add this line php_value memory_limit 12M</p></blockquote>

<p>のようだ。<br/>
レンタルしている鯖はroot権限が無いため1), 3)の対処が取れず、2)なら望みがありそうだ。<br/>
エラー文によると 原因は&#8221;class-http.php on line 1066&#8243;行コマンドのメモリ不足なので、1066行の一行前にそのメモリ使用量を増やす関数を追加することで、解決できそうだ。<br/>
しかし, memory_limitの値は変更出来ない場合があり include/setup.inc.php を編集して解決する例があった。(参考記事: <a href="http://d.hatena.ne.jp/rougeref/20100108">http://d.hatena.ne.jp/rougeref/20100108</a>)<br/>
よって私の環境では1), 3)同様php.iniに触れないため、対処できないことがわかりました。<br/>
他の環境でもroot権限がありPHPの設定をいじれる方なら３方法いずれでも対処出来る問題だと思います。</p>

<p>よって結論としては、現環境ではWordpress自動アップデートはサーバのPHPメモリ使用量制限と使用量操作へのアクセス権がないこと、の二点でした。<br/>
今回は諦め、今回は手動インストールしてみます。</p>

<p>(2012/02/13追記)<br/>
3.3.1の手動インストールを後で行った所、問題なく成功しました。しかしやはり手間だった</p>

<p>(2012/02/13追記2)<br/>
php.iniは.htaccessのあるディレクトリに自分で置き、&#8221;memory_limit=48M&#8221;と書けばOKでした</p>

<p>(2012/3/27追記3)<br/>
本文のレイアウトが崩れていたのを修正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let&#8217;s Noteのバッテリー]]></title>
    <link href="http://www.yysaki.com/blog/2010/11/08/lets-note-battery/"/>
    <updated>2010-11-08T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2010/11/08/lets-note-battery</id>
    <content type="html"><![CDATA[<p>研究室の予算でバッテリー等消耗品を買っていいよ、とのお触れが出たので今使っているLet&#8217;s Note CF-W4の劣化具合を調べてみました。</p>

<p>使ったのは窓の杜で紹介されていたBatteryBar(<a href="http://www.forest.impress.co.jp/article/2008/12/17/batterybar.html">http://www.forest.impress.co.jp/article/2008/12/17/batterybar.html</a>)。<br/>
タスクバーに入り込んでバッテリー残量などを表示するもので、丁度良くバッテリー劣化の率をパーセントで表示することができるものです。<br/>
「レベルメーターはWindows Vistaのインターフェイスと完全に調和するデザインであるため、あたかもWindows標準の機能の1つであるかのように動作する」という触れ込みだったけど、タスクバーを広げてタブを沢山視認できるようにするのが好きだったのでちょっとかさばって見えます。</p>

<p><img src="http://www.yysaki.com/images/BatteryBar_20101108-3ECO.jpg" alt="BatteryBar" /></p>

<p>結果がコレ。劣化具合が17.9%で、思っていたよりもバッテリーはへたってませんでしたｗ<br/>
電池の消費の流れを計算した感じ新品買うほどではないですね。<br/>
今までACアダプタを外して持ち歩いてる際も、最大輝度でmp3を聴きながら作業など無駄にmW数食うようなプレイングだったので、新品を購入するのを目論む前に、ACアダプタを繋がない時のPCの使い方を見直すのが先だなｗ</p>

<p>それと、スリープや電源オフの状態でもバッテリが減ってゆく、いわゆる「お漏らし」現象が型番R4,T4,W4,Y4の世代には起こるらしいです。(<a href="http://letsnote.xrea.jp/?%A5%C8%A5%E9%A5%D6%A5%EB%B4%D8%CF%A2">http://letsnote.xrea.jp/?%A5%C8%A5%E9%A5%D6%A5%EB%B4%D8%CF%A2</a>)<br/>
それの対処方法は、ACアダプタをつないで保管する、あるいはバッテリ自体を外すことみたいなので、この二つの徹底をしていこうかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整備]]></title>
    <link href="http://www.yysaki.com/blog/2010/10/19/seibi/"/>
    <updated>2010-10-19T00:00:00+09:00</updated>
    <id>http://www.yysaki.com/blog/2010/10/19/seibi</id>
    <content type="html"><![CDATA[<p>長い間放ったらかしにしてたので整備を兼ねてwordpressを2.8.6から3.0.1にアップデートしました。</p>

<p>phpセーフモードの制限のためか自動アップデートが引っかかってましたが、サーバ側の設定をいじってなんとか動作する様になりました。</p>

<p>動作環境のMySQLはverの古いデータベースだったので、サポートに問い合わせてMySQL5を使用できるようにして貰いました、ありがたや。<br/>
しかしながら古いデータベースを流用するにも文字コードの関係か文字化けするのを治せなかったので新しく作り直してみました。まあいいやってことで。</p>

<p>また、WebのバックアップをWinSCPで取り始めるようにしました。<br/>
同期やミラーリングアップロードなど便利な機能があってまだまだ使いこなせてなかったなー。</p>

<p>以上です、まだまだ使いこなせてないけどこれからってことで</p>
]]></content>
  </entry>
  
</feed>
