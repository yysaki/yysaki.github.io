<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="http://www.yysaki.com//">
  <id>http://www.yysaki.com//</id>
  <title>yysaki blog</title>
  <updated>2022-01-01T08:12:52Z</updated>
  <link rel="alternate" href="http://www.yysaki.com//" type="text/html"/>
  <link rel="self" href="http://www.yysaki.com//atom.xml" type="application/atom+xml"/>
  <author>
    <name>yysaki</name>
    <uri>http://www.yysaki.com/</uri>
  </author>
  <entry>
    <id>tag:www.yysaki.com,2022-01-01://blog/2022/01/01/played_games_in_2021/</id>
    <title type="html">2021年にプレイしたゲーム</title>
    <published>2022-01-01T08:12:52Z</published>
    <updated>2022-01-01T08:12:52Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2022/01/01/played_games_in_2021/" type="text/html"/>
    <content type="html">&lt;p&gt;喪中のため新年の挨拶はできませんが、今年もよろしくおねがいします。&lt;br /&gt;
2021年の進捗としては虚無で、主にゲームばかりしておりました。&lt;br /&gt;
生存報告代わりに今年遊んだゲームをリストアップします。&lt;/p&gt;

&lt;h2 id="リスト"&gt;リスト&lt;/h2&gt;

&lt;p&gt;今年プレイしたゲームの中でよかったリストを触った順に並べます:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bloodborne(by PS4)&lt;/li&gt;
  &lt;li&gt;DARK SOULS III(by PS4)&lt;/li&gt;
  &lt;li&gt;進め！キノピオ隊長(by Switch)&lt;/li&gt;
  &lt;li&gt;Papers, Please(Steam)&lt;/li&gt;
  &lt;li&gt;スーパーマリオ オデッセイ(by Switch)&lt;/li&gt;
  &lt;li&gt;モンスターハンターライズ(by Switch)&lt;/li&gt;
  &lt;li&gt;デモンズソウル(by PS5)&lt;/li&gt;
  &lt;li&gt;Oxygen Not Included(by PC)&lt;/li&gt;
  &lt;li&gt;メトロイドドレッド(by Switch)&lt;/li&gt;
  &lt;li&gt;月姫(by PS5)&lt;/li&gt;
  &lt;li&gt;ダンジョンエンカウンターズ(by PS5)&lt;/li&gt;
  &lt;li&gt;Darkest Dungeon(by PS5)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5月頃にPS5を入手してPS4をメルカリに放流してからは、Switch独占タイトルやSteam限定を除いてPS4/PS5版を選んだうえでPS5でプレイする傾向にありました。&lt;br /&gt;
大体トロコンするか区切りのいいところまでクリアするまでしているようです。&lt;br /&gt;
その他、友人に混ぜて頂いた卓でHeart of Crown PC、Among Us、Dominion Onlineをしました。&lt;/p&gt;

&lt;p&gt;リストの中で特によかったものを軽く紹介します。&lt;/p&gt;

&lt;h3 id="dark-souls-iii"&gt;DARK SOULS III&lt;/h3&gt;

&lt;p&gt;近代の3Dアクションゲームをそんなに触ってこなかったので、もともと2020年から2021年にかけてフロム・ソフトウェアのいわゆるソウルシリーズを一通り触ってきました。&lt;br /&gt;
DARK SOULS IIIではローディングのつなぎ目のない美麗なフィールドマップに散りばめられたショートカットポイントや休憩ポイントが配置されてておもてなしの心が行き届いてるなと思いました。数え切れないくらいゲームオーバー画面を見ましたが、とても快適な体験でした。&lt;/p&gt;

&lt;p&gt;以上です、今年もよろしくおねがいします。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2021-02-14://blog/2021/02/14/gh-pages-repository/</id>
    <title type="html">blogのリポジトリ運用の変更</title>
    <published>2021-02-14T07:51:02Z</published>
    <updated>2021-02-14T07:51:02Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2021/02/14/gh-pages-repository/" type="text/html"/>
    <content type="html">&lt;p&gt;このブログはGithub Pagesでホストしているのだけど、ソースコードをprivateにするため公開用とリポジトリを2つに分けていて、久しぶりに触ると運用方針を思い出すところから始まり認知的負荷がかかる。&lt;br /&gt;
privateにしていたものも隠すような秘匿情報を扱っているわけではないので、公開用リポジトリ側に寄せて1つにまとめてみた。&lt;br /&gt;
GitHub Actionsでのdeployの動作確認を兼ねて記事を投稿しておきます。&lt;/p&gt;

&lt;h2 id="やったこと"&gt;やったこと&lt;/h2&gt;

&lt;p&gt;以下の2つのリポジトリがあったところを、前者に寄せた:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;公開用リポジトリ: yysaki/yysaki.github.io&lt;/li&gt;
  &lt;li&gt;ソースコード用リポジトリ: yysaki/nanoc-blog(privateリポジトリ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それぞれmaster branchで運用していたが、ソースコードを前者のmasterに、公開用を &lt;code&gt;gh-pages&lt;/code&gt; branchに移動した。&lt;br /&gt;
また、この際 &lt;code&gt;actions-gh-pages&lt;/code&gt; の設定をいじる必要があり、以下のように変更した:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修正前&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- name: Deploy
  uses: peaceiris/actions-gh-pages@v3
  with:
    deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
    external_repository: yysaki/yysaki.github.io
    publish_branch: master
    publish_dir: ./output
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;修正後&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- name: Deploy
  uses: peaceiris/actions-gh-pages@v3
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    publish_dir: ./output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定が簡素になりいいことだ。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2019-06-07://blog/2020/06/07/terraform-hasura/</id>
    <title type="html">Terraform RegistryのModuleを使ってHasuraを立てる</title>
    <published>2019-06-07T03:00:00Z</published>
    <updated>2019-06-07T03:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2020/06/07/terraform-hasura/" type="text/html"/>
    <content type="html">&lt;p&gt;Terraformの素振りのため、公開されているModuleを使ってAWS ECSクラスター上にHasuraを立ててみました.&lt;br /&gt;
Auth0での認証認可まで疎通確認できたので手順を共有します.&lt;/p&gt;

&lt;h2 id="概要"&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt; について軽く説明をすると, これはPostgreSQLをバックエンドとしてAPIを自動生成してくれるGraphQLサーバーです. DBスキーマからとりうるCRUD操作をAPI越しに一通り行うことができるようにしてくれます. また、ロールベースの権限付与の仕組みをサポートしており、 &lt;a href="https://auth0.com/jp/"&gt;Auth0&lt;/a&gt; といったOAuthサービスプロバイダーと組み合わせることで、Hasura外部のサービスで認証を行ったユーザの認可から, ロールに許されたAPI操作を割り振ることができます。&lt;br /&gt;
Hasuraのサービスを稼働させるためにはHerokuが推奨されていますが、あえてAWSで立てようとするなら &lt;a href="https://hub.docker.com/r/hasura/graphql-engine"&gt;docker hubに提供されているDockerイメージ&lt;/a&gt; とデータストアであるPostgreSQLを構築する必要から、ECSを使うのが自然な選択肢になるかと思います. ちょうどTerraformでAWSの環境構築をする練習りをしたかったこともあり &lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt;を立てるのがお題として手頃そうでした.&lt;br /&gt;
一方、Terraform Registryを”hasura”で検索してみると3件ほどマッチしました。 このうちメンテナンスされておりdownload数の多い &lt;a href="https://registry.terraform.io/modules/Rayraegah/hasura/aws/3.0.2"&gt;Rayraegah/hasura/aws&lt;/a&gt; があります.  ライセンスのところに &lt;a href="https://github.com/elgordino"&gt;Gordon Johnston&lt;/a&gt; により提案されたAWSアーキテクチャを採用しているとあります, おそらく以下の記事のことと見られます.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/lineup-ninja/deploying-hasura-on-aws-with-fargate-rds-and-terraform-4gk7"&gt;Deploying Hasura on AWS with Fargate, RDS and Terraform - DEV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回はこちらをお借りしてTerraformを素振りさせてもらいました.&lt;/p&gt;

&lt;h2 id="事前準備"&gt;事前準備&lt;/h2&gt;

&lt;p&gt;今回の手順を行うにあたって必要な準備は以下の通りです:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Terraform 0.12 の実行環境&lt;/li&gt;
  &lt;li&gt;AWSアカウント
    &lt;ul&gt;
      &lt;li&gt;IAMユーザ&lt;/li&gt;
      &lt;li&gt;Route53で管理されているドメイン&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Auth0アカウント&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.electronjs.org/apps/graphiql"&gt;GraphiQL.app&lt;/a&gt; の実行環境
    &lt;ul&gt;
      &lt;li&gt;macos Homebrewであれば &lt;code&gt;brew cask install graphiql&lt;/code&gt; しておく&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事ではそれぞれのセットアップについては述べません.&lt;/p&gt;

&lt;h2 id="auth0の設定"&gt;Auth0の設定&lt;/h2&gt;

&lt;p&gt;まず, Auth0について &lt;a href="https://hasura.io/docs/1.0/graphql/manual/guides/integrations/auth0-jwt.html"&gt;Hasuraの公式ドキュメント&lt;/a&gt; を参考に事前にSingle Page Applicationを用意しておきます. Hasuraの認証認可の仕組みをこちらで整えることになります.  手順の通りなのですが, ハマりどころとして2点補足しておきます.&lt;/p&gt;

&lt;p&gt;一つ目はRulesです. “Configure Auth0 Rules &amp;amp; Callback URLs”の手順にてJWTカスタムクレームを埋め込むためのスニペットが2通り記載されています. 厳密にはどちらでも構いませんが, この手順では前者のauth0.js向けのスニペットを入力してください. 2つ目は &lt;a href="https://auth0.com/docs/api-auth/tutorials/adoption/oidc-conformant"&gt;OIDC Conformantを無効にする&lt;/a&gt; ということです. “Test auth0 login and generate sample JWTs for testing” の手順でid_tokenを取得しますが, これを無効にしておかないとコールバック時にエラーとなります.&lt;/p&gt;

&lt;h2 id="terraformのapply"&gt;TerraformのApply&lt;/h2&gt;

&lt;p&gt;手元の実行環境のお好きなディレクトリ配下に, Terraformのapplyのためmoduleの呼び出しを行う &lt;code&gt;main.tf&lt;/code&gt; および変数定義を行う &lt;code&gt;terraform.tfvars&lt;/code&gt; を用意しました.&lt;br /&gt;
&lt;a href="https://gist.github.com/yysaki/ad8396547b9fc1f14865d1b554bd24b7"&gt;gist&lt;/a&gt;に貼ってありますが、それぞれ以下の通りです:&lt;/p&gt;

&lt;p&gt;まず, main.tf:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-terraform"&gt;variable "domain" {}
variable "hasura_admin_secret" {}
variable "rds_password" {}
variable "hasura_jwt_secret_key" {}

module "hasura" {
  source                         = "Rayraegah/hasura/aws"
  version                        = "3.0.2"
  domain                         = var.domain
  hasura_version_tag             = "v1.2.1"
  hasura_admin_secret            = var.hasura_admin_secret
  hasura_jwt_secret_key          = var.hasura_jwt_secret_key
  hasura_jwt_secret_algo         = "RS256"
  rds_db_name                    = "hasura"
  rds_instance                   = "db.t3.small"
  rds_username                   = "hasura"
  rds_password                   = var.rds_password
  create_iam_service_linked_role = false
}

provider "aws" {
  region = "ap-northeast-1"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;module “hasura”になるべくdefault値を使ったうえで必要な変数定義をしています. 秘密情報にしたかったものはvariableに切り出してtfvarsにて記述することにしました. defaultを上書きした変数は3箇所あります. 1つ目は &lt;code&gt;hasura_version_tag&lt;/code&gt; , これは単純に執筆時点の最新版を使いたかったためです. 2つ目は &lt;code&gt;hasura_jwt_secret_algo&lt;/code&gt; , こちらにはHS256 または RS256が選べますが, Auth0で使用するのは後者のため設定しました. 最後にcreate_iam_service_linked_role, これはAWSのアカウント上で初めてECSを作成したときに勝手に作られる &lt;a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/using-service-linked-roles.html"&gt;service_linked_role&lt;/a&gt; の有無についてです. 私の環境では以前にECSクラスターを作ったことがあるためfalseにしましたが, この操作が初めての場合defaultのtrueとしておきましょう.&lt;/p&gt;

&lt;p&gt;次に, terraform.tfvars:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-txt"&gt;domain                = "example.com"
hasura_admin_secret   = "Password"
rds_password          = "Password"
hasura_jwt_secret_key = &amp;lt;&amp;lt;EOF
-----BEGIN CERTIFICATE-----
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxx
-----END CERTIFICATE-----
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これにはvariableで定義した変数を指定しています. 1つ目の &lt;code&gt;domain&lt;/code&gt; にはRoute53で管理しているdomainを指定してください. 続く &lt;code&gt;hasura_admin_secret&lt;/code&gt; &lt;code&gt;rds_password&lt;/code&gt; には, 前者はHasura管理画面の、 後者はRDSのパスワードになります. 最後の &lt;code&gt;hasura_jwt_secret_key&lt;/code&gt; には先のAuth0の設定後に得られる公開鍵情報を入力します. &lt;code&gt;https://&amp;lt;your-auth0-domain&amp;gt;.auth0.com/pem&lt;/code&gt; にアクセスすることで取得できます.&lt;/p&gt;

&lt;p&gt;以上で設定が完了です. 作業したディレクトリ上で &lt;code&gt;terraform init&lt;/code&gt;, &lt;code&gt;terraform plan&lt;/code&gt;, &lt;code&gt;terraform apply&lt;/code&gt; を実行しましょう.&lt;/p&gt;

&lt;h2 id="hasuraコンソールにログインする"&gt;Hasuraコンソールにログインする&lt;/h2&gt;

&lt;p&gt;上記が無事成功したことを確認するために, ブラウザから &lt;code&gt;https://hasura.&amp;lt;あなたのdomain&amp;gt;&lt;/code&gt; にアクセスしましょう. Hasuraのパスワード入力画面が出ますので, &lt;code&gt;hasura_admin_secret&lt;/code&gt; を入力してください. &lt;br /&gt;
Hasuraの管理画面が開くはずです.&lt;/p&gt;

&lt;p&gt;Hasuraのコンソール画面から, テーブル定義およびそれのuserへのpermissionをしたとします. コンソール上でポチポチ操作するだけでOKで, これによりDBマイグレーションなどのメタデータ設定が簡単に行えます. 私の環境では &lt;code&gt;users&lt;/code&gt; と &lt;code&gt;posts&lt;/code&gt; テーブルを一対多の関係で定義、&lt;code&gt;user&lt;/code&gt; ロールにそれぞれのテーブルへのSELECT権限の付与を行いました.&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;hasuraが立ったので雑なテーブル定義 &lt;a href="https://t.co/jiOcOHCasZ"&gt;pic.twitter.com/jiOcOHCasZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; sasaki (@yysaki) &lt;a href="https://twitter.com/yysaki/status/1264112622816735232?ref_src=twsrc%5Etfw"&gt;May 23, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2 id="graphql-apiの操作"&gt;GraphQL APIの操作&lt;/h2&gt;

&lt;p&gt;これまでの設定がうまくいったことを確認するために, GraphQL APIを触ってみたいと思います. 手順としてはGraphiQL.app を起動します. アプリが起動したら &lt;code&gt;GraphQL Endpoint&lt;/code&gt;に &lt;code&gt;https://hasura.&amp;lt;あなたのdomain&amp;gt;/v1/graphql&lt;/code&gt; を入力します. 次に &lt;code&gt;Edit HTTP Headers&lt;/code&gt; をクリックし, &lt;code&gt;Add Header&lt;/code&gt; からHeader nameに&lt;code&gt;Authorization&lt;/code&gt;, Header valueに &lt;code&gt;Bearer &amp;lt;id_token&amp;gt;&lt;/code&gt; を入力します. このid_tokenは “Test auth0 login and generate sample JWTs for testing”で取得したものになります. これでトップ画面に戻るとうまくいった場合Document Explorer &amp;gt; ROOT TYPES に利用可能なqueryがリストアップされます. これでHasuraから認証認可を踏まえたGraphQLのndpointが得られました.&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;Auth0認可も通ったのでOK &lt;a href="https://t.co/6TaN17mIqU"&gt;pic.twitter.com/6TaN17mIqU&lt;/a&gt;&lt;/p&gt;&amp;mdash; sasaki (@yysaki) &lt;a href="https://twitter.com/yysaki/status/1264122926783066112?ref_src=twsrc%5Etfw"&gt;May 23, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2 id="後始末"&gt;後始末&lt;/h2&gt;

&lt;p&gt;満足できるまで確認ができたら, 課金対象ですので AWSリソース を削除しましょう.  ただし, 安全のためaws_db_instanceのlife_cycleが &lt;code&gt;prevent_destroy = true&lt;/code&gt; となっているため, 単に&lt;code&gt;terraform destroy&lt;/code&gt; をしても成功しません. workaroundとして, main.tf 中のmodule定義をすべてコメントアウトして &lt;code&gt;terraform apply&lt;/code&gt; を行ってから &lt;code&gt;terraform destroy&lt;/code&gt; をすることでリソースの削除に成功します.&lt;/p&gt;

&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上で, terraformのmoduleを使わせてもらったAWSでのhasuraの構築の素振りを行いました. 素振りをやろうとした当初はイチからtfファイルを書く気持ちでいたのですが, 先人の肩を借りて手数少なく実施することができました. まじまじとregistryに公開されているmoduleを読むのは初めてでしたが, ためになります.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2019-04-14://blog/2019/04/14/techbookfest-6/</id>
    <title type="html">技術書典6に参加した</title>
    <published>2019-04-14T14:00:00Z</published>
    <updated>2019-04-14T14:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2019/04/14/techbookfest-6/" type="text/html"/>
    <content type="html">&lt;p&gt;本日行われた &lt;a href="https://techbookfest.org/event/tbf06"&gt;技術書典6&lt;/a&gt; に行ってきました。&lt;br /&gt;
初めての会場参加です。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="戦利品"&gt;戦利品&lt;/h2&gt;

&lt;p&gt;戦利品は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;サークル名: &lt;a href="http://testerchan.hatenadiary.com/"&gt;テスターちゃん&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;テスターちゃん 1巻&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://blog.nkzn.info/entry/2019/04/09/011249"&gt;越後屋&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;これでカンタン！ ITエンジニアが実践するキャッシュレス時代の資産管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://note.mu/gami/n/nffef53da2171"&gt;MERY Engineer Team&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;スターティングgRPC&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://www.lambdanote.com/"&gt;ラムダノート株式会社&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;n月刊ラムダノート Vol.1, No.1(2019)&lt;/li&gt;
      &lt;li&gt;みんなのデータ構造&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://taimen.jp/shops/show/315"&gt;妄想実行部隊&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;妄想実行報告書&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://shiganai.org/ep/ep34"&gt;しがないラジオ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;#チーム開発1年目の教科書&lt;/li&gt;
      &lt;li&gt;#非エンジニアのためのJavaScript&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://twitter.com/takepepe/status/1116694363004751872"&gt;潜推艦&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ConditionalTypes I/O - TypeScript3.4 型の強化書 -&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://watanabeyu.blogspot.com/2019/04/6.html"&gt;ハムカツおじさん🤘&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;#1人チーム本 ノウハウなしでも1人でなんとかなる React Native Expoを使ったアプリの開発環境構築/ビルド/デプロイ/運用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://twitter.com/nabettu/status/1116989059715350530"&gt;ザ・シメサバズ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="https://twitter.com/_hyme_/status/1116992952532779008"&gt;PWA Web サイトを Google Play Storeに公開するハンズオン&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://crieit.net/posts/indie-coder-jp"&gt;個人開発がやりたくなる本&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://www.m3tech.blog/entry/m3techbook-01"&gt;エムスリーエンジニアリンググループ執筆部&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;エムスリーテックブック#1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://ota42y.com/blog/2019/04/13/techbook_6/"&gt;すべてがM(icro)になる&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Microservices architecture よろず本 その三&lt;/li&gt;
      &lt;li&gt;Microservices architecture よろず本 その一＆その二&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://developers.cyberagent.co.jp/blog/archives/21439/"&gt;Japan Container Days&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;showKsではじめるクラウドネイティブ開発&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://note.mu/okash1n/n/nfb10ad57a1f2"&gt;おからぼ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ゼロトラスト超入門&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://www.chirashiura.com/entry/2019/03/24/235804"&gt;楽描帳&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;コンテナ時代のWebサービスの作り方&lt;/li&gt;
      &lt;li&gt;Pragmatic Terraform on AWS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://www.authya.com/"&gt;Auth屋&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;雰囲気でOAuth2.0を使っているエンジニアがOAuth2.0を整理して理解できる本&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;サークル名: &lt;a href="https://blog.mtb-production.info/entry/2019/04/03/215501"&gt;足跡出版&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;IT実務のアンチパターン コミュニケーション編&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="感想"&gt;感想&lt;/h2&gt;

&lt;p&gt;一般参加者入場を11:00~13:00の場合のみ有料にすることで、運営による入場者数の調整が図られています。&lt;br /&gt;
初めは無料の入場期間に入ることをもくろんでいましたが、過去の入場待機列の様子に恐れをなして12:30ごろ会場入りしました。&lt;br /&gt;
ちょうど待機列が履けたころのようで待機列に並ぶことなく入場券を購入できました。&lt;br /&gt;
現地入りしてみると先行している入場者の密度が高く、人混み慣れしていない身には熱い熱気を感じました。&lt;/p&gt;

&lt;p&gt;本は趣味分野のクラウドのサーバサイドからフロントエンドまでで、主に開発についてのものを購入しました。&lt;br /&gt;
戦利品リストを見返すと半分くらいは予定してなかったもので、同人誌即売会の購買意欲のそそり立て具合に感じ入っています。&lt;br /&gt;
目的としていた楽描帳さんの「コンテナ時代の個人Webサービスの作り方」、および「Pragmatic Terraform on AWS」だけは残念ながら紙の書籍は売り切れでしたが、それ以外は紙の書籍+DLCで入手できました。&lt;br /&gt;
売れ筋のものをどうしても紙で欲しいという場合には、開場時間に並ぶ必要がありそうです。&lt;/p&gt;

&lt;p&gt;今日は目的としていたサークルさんに顔を出すことが、それ以外にも知人がブースで売り子をしていて久しぶりに話ができたのが嬉しかったので満足しました。&lt;br /&gt;
今回もまた積読の山をしこたま増やしたので、ガンガン読むぞーという意気込みです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2019-04-14://blog/2020/04/29/react-tic-tac-toe/</id>
    <title type="html">Reactのチュートリアルで三目並べ</title>
    <published>2019-04-14T14:00:00Z</published>
    <updated>2019-04-14T14:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2020/04/29/react-tic-tac-toe/" type="text/html"/>
    <content type="html">&lt;p&gt;Reactのチュートリアルにある、三目並べを書いて動かしてみました.&lt;br /&gt;
しばらくこっちのブログを書いていなかったので、準備運動てきにブログを更新します.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id="やったこと"&gt;やったこと&lt;/h3&gt;

&lt;p&gt;Reactの公式ドキュメントにある&lt;a href="https://ja.reactjs.org/tutorial/tutorial.html"&gt;チュートリアル：React の導入 – React&lt;/a&gt; に従い、三目並べ(tic-tac-toe)を書いてみました.&lt;br /&gt;
動作例は以下の通り:&lt;/p&gt;

&lt;p class="codepen" data-height="300" data-theme-id="light" data-default-tab="js,result" data-user="yysaki" data-slug-hash="WNQEbGg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="react-tic-tac-toe"&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/yysaki/pen/WNQEbGg"&gt;
  react-tic-tac-toe&lt;/a&gt; by yysaki (&lt;a href="https://codepen.io/yysaki"&gt;@yysaki&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;h3 id="感想"&gt;感想&lt;/h3&gt;

&lt;p&gt;感想としては、素朴なreactの構造を動かしながらpropsやコンポーネントの概念が把握できました.&lt;br /&gt;
公式ドキュメントが日本語訳されており、とてもとっつきやすく感じました.&lt;/p&gt;

&lt;p&gt;また, https://github.com/yysaki/react-tic-tac-toe リポジトリを作ってこの上で一通り作業していました.&lt;br /&gt;
これはこれで create-react-app を使って &lt;code&gt;npm run start&lt;/code&gt; できる状態を作る経験になったのですが、&lt;br /&gt;
作業内容自体js 1ファイルのsnippetにに収まること, 動くサンプルをblogにかんたんに貼れると気づいたことから、&lt;br /&gt;
codepenに途中から移行しました.&lt;br /&gt;
手を動かして実験してみたいがリポジトリを作るほどでもないなーというものに対して使っていきたいと思います.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2019-01-02://blog/2019/01/02/happy-new-year/</id>
    <title type="html">昨年の振り返りと新年の抱負</title>
    <published>2019-01-02T00:00:00Z</published>
    <updated>2019-01-02T00:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2019/01/02/happy-new-year/" type="text/html"/>
    <content type="html">&lt;p&gt;明けましておめでとうございます。&lt;br /&gt;
早いもので2018年があっという間に一年が過ぎていきました。&lt;br /&gt;
せっかくの節目の時ですので、備忘のために昨年の振り返りと新年の抱負を書いていきたいと思います。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="読書について"&gt;読書について&lt;/h2&gt;

&lt;p&gt;今年は読書ペースが例年より上がりました。&lt;br /&gt;
booklogから取れた読書記録のグラフを貼ってみます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/reading_2018.png" alt="今年一年のグラフ" width="50%" /&gt;&lt;/p&gt;

&lt;p&gt;年内に100冊読むのがちょっとした目標だったのですが達成ならずです。&lt;br /&gt;
なお、漫画、ライトノベルはカウントすると件数が乱高下するので記録しない習慣でいます。&lt;/p&gt;

&lt;p&gt;趣味の読書としては一般小説やSF、ノンフィクションものが多く、勉強を兼ねた読書では７月はIT技術書がメインに読んでいました。&lt;br /&gt;
前者で読んでよかったものを３つ挙げると「アンドロイドの夢の羊」、「五色の虹」、「わたしを離さないで」。&lt;br /&gt;
後者では「レガシーコード改善ガイド」、「アジャイルな見積もりと計画づくり」、「エンジニアのためのマネジメントキャリアパス」がためになりました。&lt;/p&gt;

&lt;h2 id="趣味プロジェクトのこと"&gt;趣味プロジェクトのこと&lt;/h2&gt;

&lt;p&gt;業務の外で味のプログラミングをしておりますが、どんな腹積もりでやっているかを書いてみます。&lt;br /&gt;
自分のソフトウェアエンジニアとしてのスキルはどのようなものかを振り返ってみると、抜け穂が多いなーと感じました。&lt;br /&gt;
SIerのエンジニア職でC#・PHPを触っており、職種としてはサーバーサイドからWEBフロントエンジニアの中間あたりにいるはずです。&lt;br /&gt;
だけど、だからといってあまり体型だったスキルを持っているとは言えないんじゃないかと思っています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一から運用サーバの構築をした経験が乏しい
    &lt;ul&gt;
      &lt;li&gt;社内Redmine/gitoliteサーバのリプレイスで構築しなおすみたいなことはしたけど、売上の発生する本業ではない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;複雑なSQLのDML文をゴリゴリ書くのは好きだけどforeign key制約のあるデータベースを扱ったことがない
    &lt;ul&gt;
      &lt;li&gt;業務は回せても汎用的なスキルとしては育っていないんじゃ？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一通り作れるといってもデザインから画面イメージを1から起こせる自信がない
    &lt;ul&gt;
      &lt;li&gt;html/cssあたりにノウハウが足りない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この辺を自分の弱点だと感じていたので、趣味プロジェクトでいろいろやっていました。&lt;br /&gt;
自分の方向性、趣味としては、ビジネスロジックを考えたりユニットテストを作りこむのは好きだがサーバーの面倒はなるべく見たくない。&lt;br /&gt;
ユーザの体験に直結するUI/UXは作ってみたいが、iOS/androidのネイティブ開発にwebで汎用的にフロントエンドを作るほうが時間投資の優先度が高い。&lt;br /&gt;
突き詰めると自分が向いてる・実際にやりたいのは職種でいうとサーバーサイドよりのwebフロントエンドなのかなあと考えました。&lt;br /&gt;
そのようなことをつらつら考えつつ以下のようなことをやってきました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vue.js/Firebaseを使ってマークダウンアプリを作った&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前ブログ投稿したのですが、これはwebフロントエンドの流行を追いかけてみたいモチベーションでやってみました。&lt;/p&gt;

&lt;p&gt;記事: &lt;a href="https://www.yysaki.com/blog/2018/09/30/vue-firebase-tutorial/"&gt;yysaki blog - #Webサービスを作る本 を読んで簡易markdownエディタを作った&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mymarkdown-e7d15.firebaseapp.com/"&gt;このURL&lt;/a&gt; で稼働中です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Firebase/Nuxt.jsで趣味プロジェクトをリプレースした&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数年前にheroku・jQuery Mobile・node jsといった構成で作ったモバイルアプリがあったのですが、今度はNuxt.jsを触ってみたかったのでFirebaseでホストするNuxt.jsのSSRアプリとしてリプレースしました。&lt;br /&gt;
こちら &lt;a href="https://shikibetsuhyo.yysaki.com"&gt;このURL&lt;/a&gt; で稼働中です。&lt;br /&gt;
&lt;a href="https://qiita.com/yysaki/items/aa699ac02ad1875f9b21"&gt;一部Qiita記事&lt;/a&gt;に切り出しているのですが、開発に飽きたのでそのうちまとめ記事を書こうかと思ってます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rails1000時間メニューに入門&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FirebaseはNoSQLとして構築が簡単でいいのですが・先程挙げた弱点の克服にweb api、DBを体系立てて学ぶのにはRuby on Railsがちょうどいいと思います。&lt;br /&gt;
golangやPHPのLarabelなど選択肢はいくつもありますが、人生初めて触ったLL言語がRubyのため、Rubyに個人的に思い入れがあります。&lt;br /&gt;
簡単なRailsアプリを作ったことはありますが業務でやったことがないので、何が不足してるかわからん、みたいな状態です。&lt;br /&gt;
そんなところで &lt;a href="https://qiita.com/saboyutaka/items/1a8c40e105e93ac6856a"&gt;未経験からRuby on Railsを学んで仕事につなげるまでの1000時間メニュー - Qiita&lt;/a&gt; という記事を見かけました。&lt;br /&gt;
どこが抜けてるか試すのにちょうどいいので初心者向けすぎてマッチしてないと感じる箇所はスキップしつつ、このコースを走っているのが今ココです。&lt;/p&gt;

&lt;p&gt;あとはそうですね、vimの活動として &lt;a href="https://vimconf.org/2018/"&gt;Vimconf2018&lt;/a&gt; に参加したり、 &lt;a href="https://qiita.com/yysaki/items/fb1cbca8933c6080ebb6"&gt;Vim Advent Calendar 2018 その2 に記事を投稿したり&lt;/a&gt; しました。&lt;br /&gt;
今年は参加記事を書いておらず恐縮ですが、vimのautherであるBram Moolenaar氏のKeynoteが直に聞けたのは最高でした。&lt;/p&gt;

&lt;h2 id="新年の抱負"&gt;新年の抱負&lt;/h2&gt;

&lt;p&gt;さて、新年の抱負としては、以下のようなことをしてみたいと思っています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1年間で100冊本を読む&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;昨年達成できなかったので再度目標にしたいと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rubykaigiに参加する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;福岡なので遠いなあと思っていたのですが、会社支援のもと参加できることになりました。&lt;br /&gt;
以前参加したrubykaigi 2015は自費+有給使用でしたので福利厚生が増したのを感じます。&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="ja" dir="ltr"&gt;RubyKaigi申し込んだ&lt;br /&gt;会社支援のもと参加できるのありがたい&lt;/p&gt;&amp;mdash; sasaki (@yysaki) &lt;a href="https://twitter.com/yysaki/status/1078224873867010048?ref_src=twsrc%5Etfw"&gt;2018年12月27日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;メンタルヘルスマネジメント検定を受ける&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;メンタルに自信のない、ちょうどいい資格試験があるのを教わりました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mental-health.ne.jp/"&gt;メンタルヘルス・マネジメント検定試験,検定,試験,メンタル,大阪商工会議所&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ひとまずⅢ種 セルフケアコース の公式テキストを取り寄せて読んでいます。&lt;br /&gt;
これの資格取得を含め、学習していきたいところです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2018-09-30://blog/2018/09/30/vue-firebase-tutorial/</id>
    <title type="html">#Webサービスを作る本 を読んで簡易markdownエディタを作った</title>
    <published>2018-09-30T00:00:00Z</published>
    <updated>2018-09-30T00:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2018/09/30/vue-firebase-tutorial/" type="text/html"/>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/nabettu"&gt;@nabetu&lt;/a&gt; さんの執筆した &lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4844398350/tatsuakiw-22/"&gt;Vue.jsとFirebaseで作るミニWebサービス (技術書典シリーズ(NextPublishing))&lt;/a&gt; の手順を写経してFirebase上で動く簡単なmarkdownディターのアプリを作成しました。 &lt;a href="https://mymarkdown-e7d15.firebaseapp.com/"&gt;こちらのURL&lt;/a&gt; で実際に稼働中です。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="ja" dir="ltr"&gt;&lt;a href="https://twitter.com/hashtag/Web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B%E6%9C%AC?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Webサービスを作る本&lt;/a&gt; 1周目終了。&lt;br /&gt;UIの手入れすっ飛ばしたので週末vuetifyで遊んで設定してから強くてニューゲーム行きます。&lt;br /&gt;DBは本書使用のRealtime DatabaseでなくCloud Firestoreを採用したので、設定の違いなどをブログ記事に起こすかも。&lt;a href="https://t.co/l903YvwWbL"&gt;https://t.co/l903YvwWbL&lt;/a&gt;&lt;/p&gt;&amp;mdash; sasaki (@yysaki) &lt;a href="https://twitter.com/yysaki/status/1034464372041515008?ref_src=twsrc%5Etfw"&gt;August 28, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;このtweetからもある程度作業を進め、自分の中で修正の区切りがついたので記事をまとめます。&lt;br /&gt;
なお、作成したwebサービスのソースコードは&lt;a href="https://github.com/yysaki/mymarkdown"&gt;github&lt;/a&gt; に公開しています。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="前置き"&gt;前置き&lt;/h2&gt;

&lt;p&gt;本書はタイトルの通り, Vue.jsとFirebaseを使ってSPAなWebサービスを実際に作ってみるために必要なことがまとめられた本です。&lt;br /&gt;
私は普段の業務では双方触らないものの、強い興味があって手っ取り早く学習してみたかったためkindle版を購入しました。&lt;/p&gt;

&lt;p&gt;Firebaseは別の趣味プロジェクトでホスティングサービスであるところのFirebase Hosting、およびexpress js を走らせるためのFirebase Cloud Functionを使ったことはあったのですが、NoSQLのRealtime Databaseや Cloud Firestoreは使ったことがありませんでした。&lt;br /&gt;
Vue.jsについては全くの新規です。前知識としてはReactに並ぶ仮想DOMを使ったフロントエンドフレームワーク、というような大雑把な理解しかありませんでした。&lt;br /&gt;
日本人ソフトウェアエンジニア界隈で流行が始まっている気配を感じていたので、これを機会に学ぼうというところです。&lt;/p&gt;

&lt;h2 id="1周目"&gt;1周目&lt;/h2&gt;

&lt;p&gt;本編はVue.jsおよびFirebase Realtime Databaseを使って動くmarkdownエディタを作成していきます。文章を読んでコードを写経すればほぼ問題なく進められました。&lt;br /&gt;
僕が見た時点ではファイルパスなどの誤植がいくつかありますが、 &lt;a href="https://github.com/nabettu/mymarkdown"&gt;著者のサポートリポジトリ&lt;/a&gt; にまとめられているのでつまづくことはありませんでした。&lt;br /&gt;
また、ロゴの簡単な作り方や利用規約・プライバシーポリシーの書き方が説明されており、大事な部分だなと勉強になりました。&lt;br /&gt;
結局ロゴの作成はサボってしまったのですが、次自分のサービスを作るときにはすぐ作成できる安心感が手に入りました。&lt;/p&gt;

&lt;h2 id="firebase"&gt;Firebase&lt;/h2&gt;

&lt;p&gt;本編ではRealtime Databaseを使ったやり方が紹介されてますが、どちらかというと現在β版であるFirestoreが使って見たかったので、あえて後者を試しました。&lt;br /&gt;
これには多少苦戦して、最終的に以下の記述をして対処しました。&lt;br /&gt;
&lt;a href="https://github.com/yysaki/mymarkdown/commit/5d89a7c7cea411c76ed6ca960c42f9a780dfc8c3"&gt;githubでいうとこの辺です。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firestore ルール:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;service cloud.firestore {
  match /databases/{database}/documents {
    match /memos/{userId} {
      allow read, write: if request.auth.uid == userId;    
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;created:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;created: function() {
  var self = this;
  firebase
    .firestore()
    .collection('memos')
    .doc(this.user.uid)
    .get()
    .then(function(doc) {
      if (doc.exists) {
        self.memos = doc.data().val;
      }
    });
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;saveMemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;saveMemos: function() {
  firebase
    .firestore()
    .collection('memos')
    .doc(this.user.uid)
    .set({val: this.memos});
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今イチからやるのであれば &lt;a href="https://github.com/nabettu/firestore-manual"&gt;Firestore 移行マニュアル&lt;/a&gt; が公開してくださっているのでそちらを参考にするとよいと思います。&lt;/p&gt;

&lt;h2 id="強くてニューゲームちょい足しポイント"&gt;強くてニューゲーム・ちょい足しポイント&lt;/h2&gt;

&lt;p&gt;本書はシンプルなmarkdownエディタを作る手順が載っているんですが、追加お題の随所に散りばめられた「ちょい足しポイント」や巻末の初心者や中級者向けに出題された「強くてニューゲーム」があります。&lt;br /&gt;
私は全体の半分程度手を出したのですが、それぞれやりごたえがありました。&lt;br /&gt;
実際にやったうちいくつか例をあげると、&lt;/p&gt;

&lt;p&gt;ちょい足しポイント:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;デプロイにCIを使う。&lt;/li&gt;
  &lt;li&gt;状態管理にVuexを使用する。&lt;/li&gt;
  &lt;li&gt;Vuetifyを使ってマテリアルデザインのサイトにする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;強くてニューゲーム:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ナビゲーションバーの追加&lt;/li&gt;
  &lt;li&gt;マークダウンでチェックボックスを表示できるようにする&lt;/li&gt;
  &lt;li&gt;ログイン時に表示までLoadingを入れる&lt;/li&gt;
  &lt;li&gt;セーブ中はセーブボタンがローディングする(ローディング中は押せない)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などです。&lt;/p&gt;

&lt;p&gt;その際Vue.jsやライブラリであるVuex, Vue Router, Vuetify.jsの公式ドキュメントを読んだのですが、ドキュメントが充実しているのに驚きました。&lt;br /&gt;
ほとんどが日本語訳されているし、サンプルコードにcodepenへのリンクがあり実際にスクラッチして試せるのです。&lt;br /&gt;
特にCSSのflexboxに不慣れだったのですが、Vuetify.jsの &lt;a href="https://vuetifyjs.com/en/layout/grid"&gt;Grid system&lt;/a&gt; を何度も読み書きしてなんとかまともに動くものが作れるまでになりました。&lt;/p&gt;

&lt;p&gt;また、 &lt;a href="https://github.com/nabettu/mymarkdown/tree/feature/add-design"&gt;著者のリポジトリ&lt;/a&gt; に強くてニューゲームのサンプルがあったので何度も参考になりました。&lt;/p&gt;

&lt;h2 id="感想"&gt;感想&lt;/h2&gt;

&lt;p&gt;この本を読んで写経することで手軽にwebサービスが作れる成功体験が得られました。&lt;br /&gt;
特にFirebaseは無料のプランで満足できるものが始められるので初動が気楽です。&lt;br /&gt;
また、社内slackに公開したURLを貼って見せるとフィードバックが得られ、typoを次々見つけてもらって面白かったということもありました。&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2018-08-12://blog/2018/08/12/blog-renewal/</id>
    <title type="html">ブログのHTTPS化および開発環境整備</title>
    <published>2018-08-12T00:00:00Z</published>
    <updated>2018-08-12T00:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2018/08/12/blog-renewal/" type="text/html"/>
    <content type="html">&lt;p&gt;最近 &lt;a href="https://speakerdeck.com/rhysd/cao-wosheng-yasuji-shu-number-mydev"&gt;草を生やす技術 #mydev // Speaker Deck&lt;/a&gt; のスライドを読み直して, このブログや昔作った小さなwebアプリの整備をしてgithubの草を生やしております.&lt;br /&gt;
最近の進捗はプライベートリポジトリを含むとこんな感じ, 欠ける日もありますが2週間以上は続いてます.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/kusa_20180812.png" alt="草の様子" /&gt;&lt;/p&gt;

&lt;p&gt;ブログ整備がひと段落したので, 作業内容をメモします.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="nanocの更新"&gt;nanocの更新&lt;/h2&gt;

&lt;p&gt;このサイトは &lt;a href="https://nanoc.ws/"&gt;nanoc&lt;/a&gt; というRubyの静的サイトジェネレータを使用していますが, 使用バージョンが古かったので最新版に上げました.&lt;br /&gt;
当時の3.7.3から4系 への更新にはいくつかの修正箇所があり,  公式のアップグレードガイドに従いコツコツと修正しました.&lt;br /&gt;
&lt;a href="https://nanoc.ws/doc/nanoc-4-upgrade-guide/"&gt;Nanoc » Nanoc 4 upgrade guide&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="https化"&gt;HTTPS化&lt;/h2&gt;

&lt;p&gt;次に, このサイトはHTTPSを設定していなかったのですが, Chrome 68 で常時SSLでないと警告が出るようになってしまった昨今なので, ついでに対応しました.&lt;br /&gt;
幸い, ホストしているGithub Pagesは2018年5月からHTTPSの配信をサポートしています.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/"&gt;Custom domains on GitHub Pages gain support for HTTPS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSL証明書を別途取得する必要もなく, 手順に従いGithubのページとドメインを管理しているお名前.comの設定を画面上で操作するだけで設定が完了しました.&lt;br /&gt;
ただ, ブログのレイアウトには &lt;a href="https://booklog.jp/"&gt;Booklog&lt;/a&gt; さんのwidgetを埋め込んでいたのですが, 残念ながらこちらはHTTPS未対応です.&lt;br /&gt;
HTTPS対応予定もなさそうなのでブログから取り外しまして, 晴れてHTTPS化となりました🎉&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/https_badge.png" alt="https化" /&gt;&lt;/p&gt;

&lt;h2 id="開発環境のdocker化"&gt;開発環境のDocker化&lt;/h2&gt;

&lt;p&gt;最後に, ブログを書くたびに環境設定方法を忘れてしまうので, nanocをビルドする環境をdockerにしました.&lt;br /&gt;
これは &lt;a href="https://hub.docker.com/r/yysaki/nanoc/"&gt;こちらの Docker Hub&lt;/a&gt; に公開しています.&lt;br /&gt;
ホストOS側にclonseしてあるブログのリポジトリをマウントしておき,  docker上で &lt;code&gt;bundle exec nanoc&lt;/code&gt; コマンドでビルドしたりGithub Pagesにデプロイしたりできるようにしています.&lt;br /&gt;
秘密鍵をdocker imagesに含めたくないけどdocker上で認証の必要な操作がしたいどうしたものかと思いましたが, 秘密鍵自体もmountしてしまえばよいのだと気づきました.&lt;br /&gt;
今ではついでに.gitconfigも加えて,&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;docker run -i -t -v ~/repositories/blog:/blog -v ~/.gitconfig:/root/.gitconfig -v ~/.ssh/id_rsa:/root/.ssh/id_rsa -p 8080:3000 yysaki/nanoc /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を打ち込んでbashにアクセスしています.&lt;/p&gt;

&lt;h3 id="dockerからのプレビュー"&gt;dockerからのプレビュー&lt;/h3&gt;

&lt;p&gt;dockerに環境を移して少しハマったのは, nanocのプレビューのURL.&lt;br /&gt;
&lt;code&gt;bundle exec nanoc&lt;/code&gt; コマンドで立ち上がるWEBrickのURLはループバック・アドレスを使う http://127.0.0.1:3000/ となります.&lt;br /&gt;
ゲストOSの外からアクセスできるようにするには, 以下のようにデフォルトルートアドレスを指定してあげる必要があります:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;bundle exec nanoc view -o 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;以上です.&lt;br /&gt;
一度dockerイメージを作成してしまえば次の環境での構築の手間がゼロになるので素晴らしい.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2017-11-05://blog/2017/11/05/vimconf2017/</id>
    <title type="html">#VimConf2017 に参加した話</title>
    <published>2017-11-05T00:00:00Z</published>
    <updated>2017-11-05T00:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2017/11/05/vimconf2017/" type="text/html"/>
    <content type="html">&lt;p&gt;昨日 &lt;a href="http://vimconf.vim-jp.org/2017/"&gt;VimConf2017&lt;/a&gt; に参加してきました。&lt;br /&gt;
ブログを書くのはしばらくぶりですが、ブログ記事を書くまでがVimConfということなので書きます。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="雑感"&gt;雑感&lt;/h2&gt;

&lt;p&gt;VimConf は &lt;code&gt;An international Vim Conference&lt;/code&gt; とあり、英語onlyの発表だったり日本語の発表でもスライドが英語で作られていたり、Vim熱を感じました。 英語の勉強にと僕は借りなかったのですが、日英同時通訳ありのレシーバーの貸し出しもありました。TwitterのTLを見ていると &lt;a href="https://twitter.com/ujm"&gt;@ujm&lt;/a&gt; さんの英日翻訳がとても面白かったらしく, 会場内では不定期に笑いが起こっていました。&lt;/p&gt;

&lt;p&gt;会場はノベルティ、Wi-Fi、個人用コンセントだけでなく、コーヒーあり、お弁当あり、懇親会まで参加できるという至れりつくせりでした。 個人的にはtwitterアイコンが印刷された名札をもらえたのがとても嬉しかったです。 Meguro.vim に今後行くことがあればつけていきたい。&lt;/p&gt;

&lt;h2 id="発表"&gt;発表&lt;/h2&gt;
&lt;p&gt;発表のセッションは下記のリンクにまとめたように盛りだくさんでしたが、どれも刺激的かつ内容に被りがなかったところにvimの懐の広さを感じました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/14pViuMI_X_PiNwQD8nuGRG72GUqSeKDqoJqjAZWS39U"&gt;Vim, Me and Community&lt;/a&gt; &lt;a href="https://twitter.com/haya14busa"&gt;@haya14busa&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://speakerdeck.com/farslan/the-past-and-future-of-vim-go"&gt;The Past and Future of Vim-go&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://twitter.com/fatih"&gt;@fatih&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;Vim鼎談 &lt;a href="https://twitter.com/mattn_jp"&gt;@mattn_jp&lt;/a&gt; さん、 &lt;a href="https://twitter.com/k_takata"&gt;@k_takata&lt;/a&gt; さん、 &lt;a href="https://twitter.com/kaoriya"&gt;@kaoriya&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://speakerdeck.com/cocopon/creating-your-lovely-color-scheme"&gt;Creating your lovely color scheme&lt;/a&gt; &lt;a href="https://twitter.com/cocopon"&gt;@cocopon&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://qiita.com/t9md/items/236d09fea9bcdfabdcea"&gt;vim-mode-plus: The most ambitious vim emulator in the world&lt;/a&gt; &lt;a href="https://twitter.com/t9md"&gt;@t9md&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://lamsh.github.io/slide/2017/20171104_VimConf2017/index.html"&gt;Vim and Compatibility&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://twitter.com/senopen"&gt;@senopen&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.slideshare.net/Shougo/neosnippetvim-deoppetnvim-in-vim-conf-2017"&gt;neosnippet.vim + deoppet.nvim&lt;/a&gt; &lt;a href="https://twitter.com/ShougoMatsu"&gt;@ShougoMatsu&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://speakerdeck.com/daisuzu/how-ordinary-vim-user-contributed-to-vim"&gt;How ordinary Vim user contributed to Vim&lt;/a&gt; &lt;a href="https://twitter.com/dice_zu"&gt;@dice_zu&lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://speakerdeck.com/pocke/the-new-syntax-highlighter-for-vim"&gt;The new syntax highlighter for Vim&lt;/a&gt; &lt;a href="https://twitter.com/p_ck_"&gt;@p_ck_ &lt;/a&gt; さん&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://lambdalisue.github.io/vimconf2017/assets/player/KeynoteDHTMLPlayer.html#0"&gt;You’ve been Super Viman. After this talk, you could say you are Super Viman 2 – Life with gina.vim&lt;/a&gt; &lt;a href="https://twitter.com/lambdalisue"&gt;@lambdalisue&lt;/a&gt; さん&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;個人的によかったのは haya14busa さん、dice_zuさんの発表です。&lt;/p&gt;

&lt;p&gt;haya14busaさんのキーノートはhaya14busaさん自身の経歴を振り返り、どうVimコミュニティに関わってきたかでした。 本家の開発が止まっていたEasyMotion をフォークして修正していたところ本家のcollaboratorになり。 incsearch.vim をvimプラグインとして開発していたところついにvim本家の機能としてパッチに取りこまれたり。順々とキャリアを積み上げていくスタイルがかっこいいと思いました。&lt;br /&gt;
発表資料も作りこまれていて、 &lt;a href="https://docs.google.com/presentation/d/14pViuMI_X_PiNwQD8nuGRG72GUqSeKDqoJqjAZWS39U/edit#slide=id.g2a8159af5b_1_160"&gt;Diversity of Vim community - Type of Vim users&lt;/a&gt; のネタは秀逸でした。&lt;/p&gt;

&lt;p&gt;次にdice_zuさんの発表、 &lt;code&gt;ordinary&lt;/code&gt; なVimユーザーがvimにcontributeするとは、という話です。 自分も普通のユーザーなので, バグを見つけてCのコードーベースから原因を特定し、vim-dev にパッチを送る、というまではすごく高いハードルに見えます。ですがdice_zuさんによれば、必要なのは &lt;code&gt;a great passion&lt;/code&gt; だけ。 毎日最新のvimをビルドすること、職場でのVimトークをすることで何かしらイシューは発見できる。 懇親会でもお話させてもらい、その姿勢だけでも十分 &lt;code&gt;ordinary&lt;/code&gt; として強いと思いましたが、最新のvimにキャッチアップするのは良いと思うので、まずそこから真似していきたいなと思います。&lt;/p&gt;

&lt;h2 id="まとめ"&gt;まとめ&lt;/h2&gt;

&lt;p&gt;他にもVim界のレジェンドであるmattn_jpさん、k_takataさん、kaoriyaさんらのVim鼎談など、聞いててためになる情報密度の高い発表が盛りだくさんでした。&lt;/p&gt;

&lt;p&gt;まだまだ消化不良なので、今日はのんびりVimConfの余韻に浸かっていようと思います。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.yysaki.com,2014-02-12://blog/2014/02/12/octopress-as-a-tracer-bullet/</id>
    <title type="html">octopress as a tracer bullet</title>
    <published>2014-02-12T00:00:00Z</published>
    <updated>2014-02-12T00:00:00Z</updated>
    <link rel="alternate" href="http://www.yysaki.com//blog/2014/02/12/octopress-as-a-tracer-bullet/" type="text/html"/>
    <content type="html">&lt;p&gt;一旦ブログをoctopressで立ち上げたは言いものの、&lt;a href="https://twitter.com/kana1"&gt;@kana&lt;/a&gt;さんより&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;&lt;a href="https://twitter.com/yysaki"&gt;@yysaki&lt;/a&gt; ほしのかずほどありますね! &lt;a href="http://t.co/cnDApQUMHV"&gt;http://t.co/cnDApQUMHV&lt;/a&gt; Ruby製だとnanocがコンパクトにまとまってて冀(neocomplcache_start_auto_complete)…部実装も面白いですね。&lt;/p&gt;&amp;mdash; Kana Natsuno (@kana1) &lt;a href="https://twitter.com/kana1/statuses/432530023648485378"&gt;2014, 2月 9&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;とコメントを頂戴したので、色々とRuby製の静的サイトジェネレータについて調べました。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="ツール選び"&gt;ツール選び&lt;/h2&gt;
&lt;p&gt;自分のブログ作成における価値観は、以下のようになります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;静的サイトジェネレータでGithub Pagesに運用の楽なブログを作る&lt;/li&gt;
  &lt;li&gt;Markdownで記事を書きたい&lt;/li&gt;
  &lt;li&gt;サクサクカスタマイズ出来てそれなりの見栄えなブログを作りたい
    &lt;ul&gt;
      &lt;li&gt;octopressのリキッドレイアウトとかかっこいいよね！&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;手慣れたRuby製ツール&lt;/li&gt;
  &lt;li&gt;HP作りの勉強を兼ねるので魔術的要素が少なくコンパクトなフレームワークがいい&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;その中、候補としては、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nanoc&lt;/li&gt;
  &lt;li&gt;jekyll(octopress)&lt;/li&gt;
  &lt;li&gt;middleman&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりに絞られました。&lt;br /&gt;
静的サイトジェネレータの比較は色々な記事が挙がっているので本記事では取り上げず、参考にしたリンクを下記に示すだけに留めます。&lt;br /&gt;
この中でnanocがヘルパーメソッドを手作りしたり自分でブログの機能を作成する感が楽しそうです。&lt;br /&gt;
octopressもとてもいいのですが、新しくカスタマイズする分には型にはまりすぎる印象があります。&lt;br /&gt;
そのため将来的にはnanocを使ってみたいですね。&lt;/p&gt;

&lt;h2 id="引っ越し"&gt;引っ越し&lt;/h2&gt;
&lt;p&gt;しかしながらまずは引っ越し元のWordpressを荷下ろしを終わらせたいので、octopressでしばらく運用してみようと思います。&lt;br /&gt;
自分なりのブログに対する要求分析がしっかりされてないので、どんな機能をnanocで作っていきたいかをoctopressで洗い出すのも重要ですし。&lt;/p&gt;

&lt;p&gt;また、多少ながらカスタマイズとして、ブログコメントサービスのDisqusの導入やはてブボタンの設置など以下のリンクを参考にやってみました。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://morizyun.github.io/blog/octopress-hatena-disqus-new-tab/"&gt;5分でできる簡単 Octopress セッティング - 酒と泪とRubyとRailsと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="結論"&gt;結論&lt;/h2&gt;
&lt;p&gt;曳光弾としてoctopressに引っ越して要件を洗い出しつつ、将来的にはnanocでブログの自作をする方針で行こうと思います。&lt;/p&gt;

&lt;h3 id="参考リンク"&gt;参考リンク&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://staticsitegenerators.net/"&gt;Static Site Generators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Nanoc以外の静的サイト生成ツールを調べてみた&lt;/td&gt;
          &lt;td&gt;ひげろぐ](http://higelog.brassworks.jp/?p=2076)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="http://rubyredbricks.com/blog/2013/09/30/from-octopress-to-nanoc/"&gt;Ruby Red Bricks - From Octopress to nanoc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://n.blueblack.net/articles/2012-05-03_02_nanoc_getting_started/"&gt;nanoc導入メモ 1/5 「Getting Started」編 - ナレッジエース&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>

